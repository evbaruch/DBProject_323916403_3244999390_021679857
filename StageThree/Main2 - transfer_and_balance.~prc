CREATE OR REPLACE PROCEDURE main_transfer_and_balance (
    p_transfer_amount NUMBER,
    p_from_account_id NUMBER,
    p_to_account_id NUMBER
)
IS
    v_total_balance NUMBER;
    v_from_balance NUMBER;
    v_to_balance NUMBER;
    v_customer_id Customer.CustomerID%TYPE;
    v_customer_firstname Customer.FirstName%TYPE;
    v_customer_lastname Customer.LastName%TYPE;
    v_linked_account_count NUMBER;
    v_customer_details SYS_REFCURSOR;

    CURSOR c_check_balances IS
        SELECT AccountID, Balance
        FROM Account
        WHERE AccountID IN (p_from_account_id, p_to_account_id);

    v_account_record c_check_balances%ROWTYPE;

BEGIN
    DBMS_OUTPUT.PUT_LINE('Starting main_transfer_and_balance procedure...');

    -- Step 1: Check balances of both accounts
    OPEN c_check_balances;
    LOOP
        FETCH c_check_balances INTO v_account_record;
        EXIT WHEN c_check_balances%NOTFOUND;

        IF v_account_record.AccountID = p_from_account_id THEN
            v_from_balance := v_account_record.Balance;
        ELSIF v_account_record.AccountID = p_to_account_id THEN
            v_to_balance := v_account_record.Balance;
        END IF;
    END LOOP;
    CLOSE c_check_balances;

    DBMS_OUTPUT.PUT_LINE('Balance of from account (ID ' || p_from_account_id || '): $' || v_from_balance);
    DBMS_OUTPUT.PUT_LINE('Balance of to account (ID ' || p_to_account_id || '): $' || v_to_balance);
    DBMS_OUTPUT.NEW_LINE;

    -- Step 2: Check if the transfer is valid
    IF v_from_balance >= p_transfer_amount THEN
        -- Proceed with the transfer
        DBMS_OUTPUT.PUT_LINE('Proceeding with the transfer of $' || p_transfer_amount);

        -- Transfer money
        transfer_money(p_from_account_id, p_to_account_id, p_transfer_amount);

        -- Recalculate balances
        v_from_balance := v_from_balance - p_transfer_amount;
        v_to_balance := v_to_balance + p_transfer_amount;

        DBMS_OUTPUT.PUT_LINE('New balance of from account (ID ' || p_from_account_id || '): $' || v_from_balance);
        DBMS_OUTPUT.PUT_LINE('New balance of to account (ID ' || p_to_account_id || '): $' || v_to_balance);
        DBMS_OUTPUT.NEW_LINE;

        -- Step 3: Fetch customer details using cursor
        v_customer_details := get_customer_details_from_account(p_from_account_id);

        -- Fetch details from the cursor and print
        FETCH v_customer_details INTO v_customer_id, v_customer_firstname, v_customer_lastname, v_linked_account_count;

        IF v_customer_id IS NOT NULL THEN
            DBMS_OUTPUT.PUT_LINE('Oldest Customer ID linked to Account ' || p_from_account_id || ': ' || v_customer_id);
            DBMS_OUTPUT.PUT_LINE('Name: ' || v_customer_firstname || ' ' || v_customer_lastname);
            DBMS_OUTPUT.PUT_LINE('Number of other accounts linked to this customer: ' || (v_linked_account_count - 1));

            -- Calculate total balance for the customer
            v_total_balance := get_customer_total_balance(v_customer_id);

            DBMS_OUTPUT.PUT_LINE('Total balance for customer ID ' || v_customer_id || ': $' || v_total_balance);
        ELSE
            DBMS_OUTPUT.PUT_LINE('No customer found linked to Account ' || p_from_account_id);
        END IF;

        CLOSE v_customer_details;

        DBMS_OUTPUT.NEW_LINE;
        DBMS_OUTPUT.PUT_LINE('main_transfer_and_balance procedure completed.');
    ELSE
        -- Insufficient funds
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the from account (ID ' || p_from_account_id || ').');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No customer found linked to Account ' || p_from_account_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in main_transfer_and_balance: ' || SQLERRM);
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Transaction rolled back due to error.');
END;
/
